{"remainingRequest":"D:\\porject\\vue02\\testcli3.01\\mall\\node_modules\\babel-loader\\lib\\index.js!D:\\porject\\vue02\\testcli3.01\\mall\\src\\network\\axios.js","dependencies":[{"path":"D:\\porject\\vue02\\testcli3.01\\mall\\src\\network\\axios.js","mtime":1616639608106},{"path":"D:\\porject\\vue02\\testcli3.01\\mall\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\porject\\vue02\\testcli3.01\\mall\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":["import axios from 'axios';\nexport function request(config) {\n  // 1.创建axios实例\n  var instance = axios.create({\n    baseURL: 'http://152.136.185.210:7878/api/m5',\n    timeout: 5000\n  }); // 2.拦截器\n\n  instance.interceptors.request.use(function (config) {\n    // 请求成功 不复合要求  loading 登陆 等操作\n    return config;\n  }, function (err) {}); // 2.2 响应拦截\n\n  instance.interceptors.response.use(function (res) {\n    // 响应成功\n    return res.data;\n  }, function (err) {// 响应失败\n  }); // 3. 发送网络请求 返回promis\n\n  return instance(config);\n}",{"version":3,"sources":["D:/porject/vue02/testcli3.01/mall/src/network/axios.js"],"names":["axios","request","config","instance","create","baseURL","timeout","interceptors","use","err","response","res","data"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,SAASC,OAAT,CAAiBC,MAAjB,EAAyB;AAC9B;AACA,MAAMC,QAAQ,GAAGH,KAAK,CAACI,MAAN,CAAa;AAC5BC,IAAAA,OAAO,EAAE,oCADmB;AAE5BC,IAAAA,OAAO,EAAE;AAFmB,GAAb,CAAjB,CAF8B,CAM9B;;AACAH,EAAAA,QAAQ,CAACI,YAAT,CAAsBN,OAAtB,CAA8BO,GAA9B,CAAkC,UAAAN,MAAM,EAAI;AAC1C;AACA,WAAOA,MAAP;AACD,GAHD,EAGG,UAAAO,GAAG,EAAI,CACT,CAJD,EAP8B,CAY9B;;AACAN,EAAAA,QAAQ,CAACI,YAAT,CAAsBG,QAAtB,CAA+BF,GAA/B,CAAmC,UAAAG,GAAG,EAAI;AACxC;AACA,WAAOA,GAAG,CAACC,IAAX;AACD,GAHD,EAGG,UAAAH,GAAG,EAAI,CACR;AACD,GALD,EAb8B,CAmB9B;;AACA,SAAON,QAAQ,CAACD,MAAD,CAAf;AACD","sourcesContent":["import axios from 'axios'\r\n\r\nexport function request(config) {\r\n  // 1.创建axios实例\r\n  const instance = axios.create({\r\n    baseURL: 'http://152.136.185.210:7878/api/m5',\r\n    timeout: 5000\r\n  })\r\n  // 2.拦截器\r\n  instance.interceptors.request.use(config => {\r\n    // 请求成功 不复合要求  loading 登陆 等操作\r\n    return config\r\n  }, err => {\r\n  })\r\n  // 2.2 响应拦截\r\n  instance.interceptors.response.use(res => {\r\n    // 响应成功\r\n    return res.data\r\n  }, err => {\r\n    // 响应失败\r\n  })\r\n  // 3. 发送网络请求 返回promis\r\n  return instance(config)\r\n}"]}]}